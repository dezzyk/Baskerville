// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROJECT_PROJECTSERIALIZE_H_
#define FLATBUFFERS_GENERATED_PROJECT_PROJECTSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

namespace ProjectSerialize {

struct Run;
struct RunBuilder;

struct Project;
struct ProjectBuilder;

struct Run FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RunBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRST_LINE = 4,
    VT_WORD_COUNT = 6,
    VT_VALUE = 8
  };
  bool first_line() const {
    return GetField<uint8_t>(VT_FIRST_LINE, 0) != 0;
  }
  int32_t word_count() const {
    return GetField<int32_t>(VT_WORD_COUNT, 0);
  }
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FIRST_LINE) &&
           VerifyField<int32_t>(verifier, VT_WORD_COUNT) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct RunBuilder {
  typedef Run Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_first_line(bool first_line) {
    fbb_.AddElement<uint8_t>(Run::VT_FIRST_LINE, static_cast<uint8_t>(first_line), 0);
  }
  void add_word_count(int32_t word_count) {
    fbb_.AddElement<int32_t>(Run::VT_WORD_COUNT, word_count, 0);
  }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(Run::VT_VALUE, value);
  }
  explicit RunBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RunBuilder &operator=(const RunBuilder &);
  flatbuffers::Offset<Run> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Run>(end);
    return o;
  }
};

inline flatbuffers::Offset<Run> CreateRun(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool first_line = false,
    int32_t word_count = 0,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  RunBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_word_count(word_count);
  builder_.add_first_line(first_line);
  return builder_.Finish();
}

inline flatbuffers::Offset<Run> CreateRunDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool first_line = false,
    int32_t word_count = 0,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return ProjectSerialize::CreateRun(
      _fbb,
      first_line,
      word_count,
      value__);
}

struct Project FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION_YEAR = 4,
    VT_VERSION_MAJOR = 6,
    VT_VERSION_MINOR = 8,
    VT_NAME = 10,
    VT_RUNS = 12
  };
  int16_t version_year() const {
    return GetField<int16_t>(VT_VERSION_YEAR, 0);
  }
  int16_t version_major() const {
    return GetField<int16_t>(VT_VERSION_MAJOR, 0);
  }
  int16_t version_minor() const {
    return GetField<int16_t>(VT_VERSION_MINOR, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ProjectSerialize::Run>> *runs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ProjectSerialize::Run>> *>(VT_RUNS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VERSION_YEAR) &&
           VerifyField<int16_t>(verifier, VT_VERSION_MAJOR) &&
           VerifyField<int16_t>(verifier, VT_VERSION_MINOR) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_RUNS) &&
           verifier.VerifyVector(runs()) &&
           verifier.VerifyVectorOfTables(runs()) &&
           verifier.EndTable();
  }
};

struct ProjectBuilder {
  typedef Project Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version_year(int16_t version_year) {
    fbb_.AddElement<int16_t>(Project::VT_VERSION_YEAR, version_year, 0);
  }
  void add_version_major(int16_t version_major) {
    fbb_.AddElement<int16_t>(Project::VT_VERSION_MAJOR, version_major, 0);
  }
  void add_version_minor(int16_t version_minor) {
    fbb_.AddElement<int16_t>(Project::VT_VERSION_MINOR, version_minor, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Project::VT_NAME, name);
  }
  void add_runs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ProjectSerialize::Run>>> runs) {
    fbb_.AddOffset(Project::VT_RUNS, runs);
  }
  explicit ProjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ProjectBuilder &operator=(const ProjectBuilder &);
  flatbuffers::Offset<Project> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Project>(end);
    return o;
  }
};

inline flatbuffers::Offset<Project> CreateProject(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t version_year = 0,
    int16_t version_major = 0,
    int16_t version_minor = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ProjectSerialize::Run>>> runs = 0) {
  ProjectBuilder builder_(_fbb);
  builder_.add_runs(runs);
  builder_.add_name(name);
  builder_.add_version_minor(version_minor);
  builder_.add_version_major(version_major);
  builder_.add_version_year(version_year);
  return builder_.Finish();
}

inline flatbuffers::Offset<Project> CreateProjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t version_year = 0,
    int16_t version_major = 0,
    int16_t version_minor = 0,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<ProjectSerialize::Run>> *runs = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto runs__ = runs ? _fbb.CreateVector<flatbuffers::Offset<ProjectSerialize::Run>>(*runs) : 0;
  return ProjectSerialize::CreateProject(
      _fbb,
      version_year,
      version_major,
      version_minor,
      name__,
      runs__);
}

inline const ProjectSerialize::Project *GetProject(const void *buf) {
  return flatbuffers::GetRoot<ProjectSerialize::Project>(buf);
}

inline const ProjectSerialize::Project *GetSizePrefixedProject(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ProjectSerialize::Project>(buf);
}

inline bool VerifyProjectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ProjectSerialize::Project>(nullptr);
}

inline bool VerifySizePrefixedProjectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ProjectSerialize::Project>(nullptr);
}

inline void FinishProjectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ProjectSerialize::Project> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProjectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ProjectSerialize::Project> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ProjectSerialize

#endif  // FLATBUFFERS_GENERATED_PROJECT_PROJECTSERIALIZE_H_
