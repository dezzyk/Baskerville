// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FONTCACHE_FONTCACHESERIALIZE_H_
#define FLATBUFFERS_GENERATED_FONTCACHE_FONTCACHESERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

namespace FontCacheSerialize {

struct Glyph;
struct GlyphBuilder;

struct FontCache;
struct FontCacheBuilder;

struct Glyph FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GlyphBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BITMAP = 4,
    VT_INDEX = 6
  };
  const flatbuffers::Vector<int8_t> *bitmap() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_BITMAP);
  }
  int16_t index() const {
    return GetField<int16_t>(VT_INDEX, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BITMAP) &&
           verifier.VerifyVector(bitmap()) &&
           VerifyField<int16_t>(verifier, VT_INDEX) &&
           verifier.EndTable();
  }
};

struct GlyphBuilder {
  typedef Glyph Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bitmap(flatbuffers::Offset<flatbuffers::Vector<int8_t>> bitmap) {
    fbb_.AddOffset(Glyph::VT_BITMAP, bitmap);
  }
  void add_index(int16_t index) {
    fbb_.AddElement<int16_t>(Glyph::VT_INDEX, index, 0);
  }
  explicit GlyphBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GlyphBuilder &operator=(const GlyphBuilder &);
  flatbuffers::Offset<Glyph> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Glyph>(end);
    return o;
  }
};

inline flatbuffers::Offset<Glyph> CreateGlyph(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> bitmap = 0,
    int16_t index = 0) {
  GlyphBuilder builder_(_fbb);
  builder_.add_bitmap(bitmap);
  builder_.add_index(index);
  return builder_.Finish();
}

inline flatbuffers::Offset<Glyph> CreateGlyphDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *bitmap = nullptr,
    int16_t index = 0) {
  auto bitmap__ = bitmap ? _fbb.CreateVector<int8_t>(*bitmap) : 0;
  return FontCacheSerialize::CreateGlyph(
      _fbb,
      bitmap__,
      index);
}

struct FontCache FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FontCacheBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_GLYPHS = 6,
    VT_BITMAP_WIDTH = 8,
    VT_BITMAP_HEIGHT = 10
  };
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FontCacheSerialize::Glyph>> *glyphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FontCacheSerialize::Glyph>> *>(VT_GLYPHS);
  }
  int32_t bitmap_width() const {
    return GetField<int32_t>(VT_BITMAP_WIDTH, -1);
  }
  int32_t bitmap_height() const {
    return GetField<int32_t>(VT_BITMAP_HEIGHT, -1);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyOffset(verifier, VT_GLYPHS) &&
           verifier.VerifyVector(glyphs()) &&
           verifier.VerifyVectorOfTables(glyphs()) &&
           VerifyField<int32_t>(verifier, VT_BITMAP_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_BITMAP_HEIGHT) &&
           verifier.EndTable();
  }
};

struct FontCacheBuilder {
  typedef FontCache Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(FontCache::VT_DATA, data);
  }
  void add_glyphs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FontCacheSerialize::Glyph>>> glyphs) {
    fbb_.AddOffset(FontCache::VT_GLYPHS, glyphs);
  }
  void add_bitmap_width(int32_t bitmap_width) {
    fbb_.AddElement<int32_t>(FontCache::VT_BITMAP_WIDTH, bitmap_width, -1);
  }
  void add_bitmap_height(int32_t bitmap_height) {
    fbb_.AddElement<int32_t>(FontCache::VT_BITMAP_HEIGHT, bitmap_height, -1);
  }
  explicit FontCacheBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FontCacheBuilder &operator=(const FontCacheBuilder &);
  flatbuffers::Offset<FontCache> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FontCache>(end);
    return o;
  }
};

inline flatbuffers::Offset<FontCache> CreateFontCache(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FontCacheSerialize::Glyph>>> glyphs = 0,
    int32_t bitmap_width = -1,
    int32_t bitmap_height = -1) {
  FontCacheBuilder builder_(_fbb);
  builder_.add_bitmap_height(bitmap_height);
  builder_.add_bitmap_width(bitmap_width);
  builder_.add_glyphs(glyphs);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<FontCache> CreateFontCacheDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *data = nullptr,
    const std::vector<flatbuffers::Offset<FontCacheSerialize::Glyph>> *glyphs = nullptr,
    int32_t bitmap_width = -1,
    int32_t bitmap_height = -1) {
  auto data__ = data ? _fbb.CreateVector<int8_t>(*data) : 0;
  auto glyphs__ = glyphs ? _fbb.CreateVector<flatbuffers::Offset<FontCacheSerialize::Glyph>>(*glyphs) : 0;
  return FontCacheSerialize::CreateFontCache(
      _fbb,
      data__,
      glyphs__,
      bitmap_width,
      bitmap_height);
}

inline const FontCacheSerialize::FontCache *GetFontCache(const void *buf) {
  return flatbuffers::GetRoot<FontCacheSerialize::FontCache>(buf);
}

inline const FontCacheSerialize::FontCache *GetSizePrefixedFontCache(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FontCacheSerialize::FontCache>(buf);
}

inline bool VerifyFontCacheBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FontCacheSerialize::FontCache>(nullptr);
}

inline bool VerifySizePrefixedFontCacheBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FontCacheSerialize::FontCache>(nullptr);
}

inline void FinishFontCacheBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FontCacheSerialize::FontCache> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFontCacheBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FontCacheSerialize::FontCache> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FontCacheSerialize

#endif  // FLATBUFFERS_GENERATED_FONTCACHE_FONTCACHESERIALIZE_H_
